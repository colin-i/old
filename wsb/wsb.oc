

format elfobj


include "wsb.h"

import "printf" printf
import "fclose" fclose
import "strlen" strlen

function log_file()
    data file#1
    return #file
endfunction
function log_open()
    sd file_store
    setcall file_store log_file()
    sd file
    setcall file file_open("filesystem.log","wb")
    set file_store# file
endfunction
function log_set(ss pre_text,ss text)
    sd file_store
    setcall file_store log_file()
    sd sz
    setcall sz strlen(pre_text)
    call file_write(file_store#,pre_text,sz)
    setcall sz strlen(text)
    call file_write(file_store#,text,sz)
    chars nl={0xd,0xa}
    call file_write(file_store#,#nl,2)
endfunction
function log_close()
    sd file_store
    setcall file_store log_file()
    call fclose(file_store#)
endfunction

const template_data_size=3*DWORD

function templates()
    #stored templates: mem,first_part_size,rest_of_size;.....0
    data opened_templates#template_data_size*10
    return #opened_templates
endfunction

function texter(ss msg)
    call printf(msg)
    chars nl={0xa,0}
    call printf(#nl)
    import "exit" exit
    call exit(0)
endfunction

import "sprintf" sprintf

#file
function file_open(ss filepath,ss method)
    import "fopen" fopen
    sd file
    setcall file fopen(filepath,method)
    If file==0
        chars info#MAX_PATH+safe_chars_to_add
        chars *=0
        call sprintf(#info,"Cannot open a file: %s",filepath)
        call texter(#info)
    EndIf
    return file
endfunction
function file_seek(ss file,sd off,sd method)
    import "fseek" fseek
    sd seekint
    setcall seekint fseek(file,off,method)
    If seekint!=0
        str seekerr="File seek error"
        call texter(seekerr)
    endif
endfunction
#sz
function file_tell(sd file)
    import "ftell" ftell
    sd sz
    setcall sz ftell(file)
    if sz==-1
        str ftellerr="File tell error"
        call texter(ftellerr)
    endif
    return sz
endfunction
#mem
function memalloc(sd sz)
    import "malloc" malloc
    sd mem
    SetCall mem malloc(sz)
    If mem==0
        str newmem="Malloc failed"
        call texter(newmem)
    endif
    return mem
EndFunction
function file_read(sd file,sd mem,sd size)
    import "fread" fread
    sd read
    setcall read fread(mem,1,size,file)
    if read!=size
        str er="Read length is different or error"
        call texter(er)
    endif
endfunction

import "free" free

function file_write(sd file,sd buffer,sd size)
    if size==0
        return (void)
    endif
    import "fwrite" fwrite
    sd len
    setcall len fwrite(buffer,1,size,file)
    if len!=0
        return (void)
    endif
    str er="File write error"
    call texter(er)
endfunction

#pos where the string is in mem
function str_in_mem(ss str,ss mem,sd len)
    ss err
    sd pos
    setcall pos string_in_mem(str,mem,len,#err)
    if err!=0
        call texter(err)
    endif
    return pos
endfunction
#bool
function str_in_mem_bool(ss str,ss mem,sd len,sd p_pos)
    ss err
    setcall p_pos# string_in_mem(str,mem,len,#err)
    if err!=0
        return (FALSE)
    endif
    return (TRUE)
endfunction

import "memcmp" memcmp
#pos where the string is in mem/or all size
function string_in_mem(ss str,ss mem,sd len,sd p_err)
    set p_err# 0
    sd sz
    setcall sz strlen(str)
    if sz>len
        set p_err# "string is greater than mem"
        return len
    endif
    sd lastgood
    set lastgood len
    sub lastgood sz
    sd i=0
    while i<=lastgood
        sd compare
        setcall compare memcmp(mem,str,sz)
        if compare==0
            return i
        endif
        inc mem
        inc i
    endwhile
    set p_err# "string not found in mem"
    return len
endfunction

import "_chdir" chdir
function dirch_nolog(ss value)
    sd change
    setcall change chdir(value)
    if change!=0
        import "_get_errno" get_errno
        sd err
        call get_errno(#err)
        if err!=(ENOENT)
            call texter("Change dir error")
        endif
        import "_mkdir" mkdir
        sd make
        setcall make mkdir(value)
        if make!=0
            call texter("Mkdir error")
        endif
        setcall change chdir(value)
        if change!=0
            call texter("chdir error(after mkdir)")
        endif
    endif
endfunction

function dirch(ss value)
    call dirch_nolog(value)
    call log_set("D ",value)
endfunction

#memcmp/2
function str_compare(ss str1,ss str2)
    sd sz1
    sd sz2
    setcall sz1 strlen(str1)
    setcall sz2 strlen(str2)
    if sz1!=sz2
        return 2
    endif
    sd compare
    setcall compare memcmp(str1,str2,sz1)
    return compare
endfunction

#filename/0
function loop(ss name,sd p_is_template)
    str back=".."
    sd compare
    setcall compare str_compare(back,name)
    if compare==0
        #is back one folder
        call dirch(back)
        return 0
    endif
    str template_end="!"
    setcall compare str_compare(template_end,name)
    if compare==0
        #is template end
        sd templates_data
        setcall templates_data templates()
        sd containers_data
        set containers_data templates_data
        while templates_data#!=0
            add templates_data (template_data_size)
        endwhile
        if templates_data==containers_data
            call texter("error with the templates end")
        endif
        sub templates_data (template_data_size)
        call free(templates_data#)
        set templates_data# 0
        return 0
    endif
    #
    set p_is_template# 0
    ss cursor
    set cursor name
    while cursor#!=0
        chars dot="."
        if cursor#==dot
            inc cursor
            sd len
            sd len2
            setcall len2 strlen(cursor)
            #
            str dir_nm="dir"
            setcall len strlen(dir_nm)
            if len==len2
                setcall compare memcmp(cursor,dir_nm,len)
                if compare==0
                    #is a folder name, and the file is index.php from inside the folder
                    dec cursor
                    set cursor# 0
                    call dirch(name)
                    set cursor# dot
                    return "index.php"
                endif
                #is a file 1
                return name
            endif
            str tmpl="container"
            setcall len strlen(tmpl)
            if len==len2
                setcall compare memcmp(cursor,tmpl,len)
                if compare==0
                    #is container
                    set p_is_template# 1
                endif
            endif
            #is a file 2
            return name
        endif
        inc cursor
    endwhile
    #is a file 3
    return name
endfunction
#filepath
function src_path(ss filename)
    chars path#MAX_PATH
    #
    ss dest
    setcall dest src_folder()
    sd sz
    setcall sz strlen(dest)
    #
    addcall sz strlen(filename)
    inc sz
    if sz>(MAX_PATH)
        call texter("error data_open")
    endif
    call sprintf(#path,"%s%s",dest,filename)
    return #path
endfunction
#file
function src_open(ss filename)
    ss path
    setcall path src_path(filename)
    sd file
    setcall file file_open(path,"rb")
    return file
endfunction

function template_string()
    chars template="<!-- -->"
    return #template
endfunction
function template_string_length()
    ss t_str
    setcall t_str template_string()
    sd sz
    setcall sz strlen(t_str)
    return sz
endfunction

function src_get_template(ss filename,sd containers)
    sd file
    setcall file src_open(filename)
    call file_seek(file,0,(SEEK_END))
    sd len
    setcall len file_tell(file)
    call file_seek(file,0,(SEEK_SET))
    sd mem
    setcall mem memalloc(len)
    call file_read(file,mem,len)
    call fclose(file)
    sd t_cursor
    set t_cursor containers
    while t_cursor#!=0
        add t_cursor (template_data_size)
    endwhile
    set t_cursor# mem
    add t_cursor (DWORD)

    ss t_str
    setcall t_str template_string()
    sd pos
    setcall pos str_in_mem(t_str,mem,len)
    sd sz
    setcall sz strlen(t_str)
    sub len pos
    sub len sz
    set t_cursor# pos
    add t_cursor (DWORD)
    set t_cursor# len
    add t_cursor (DWORD)

    set t_cursor# 0
endfunction

#mem
function file_get_content(ss filename,sd p_len)
    sd file
    setcall file file_open(filename,"rb")
    call file_seek(file,0,(SEEK_END))
    sd len
    setcall len file_tell(file)
    call file_seek(file,0,(SEEK_SET))
    sd mem
    setcall mem memalloc(len)
    call file_read(file,mem,len)
    call fclose(file)
    set p_len# len
    return mem
endfunction
function file_get_content_forward(ss filename,sd forward)
     call file_get_content_forward_data(filename,forward,0)
endfunction
function file_get_content_forward_data(ss filename,sd forward,sd data)
    sd mem
    sd len
    setcall mem file_get_content(filename,#len)
    call forward(mem,len,data)
    call free(mem)
endfunction

function cpymem(ss dest,ss src,sd size)
    while size!=0
        set dest# src#
        inc dest
        inc src
        dec size
    endwhile
endfunction

function p_dest_folder()
    data p#1
    return #p
endfunction
function dest_folder()
    #chars src#MAX_PATH
    sd p;setcall p p_dest_folder()
    return p#
endfunction

function p_src_folder()
    data p#1
    return #p
endfunction
function src_folder()
    #chars dest#MAX_PATH
    sd p;setcall p p_src_folder()
    return p#
endfunction

const files_size=100*100
function files_pointer()
    chars files#files_size
    return #files
endfunction
function files_set(ss mem,sd size)
    ss files_size=0
    ss entry
    sd nl=0
    set entry mem
    while size!=0
        if mem#==0xd
            set mem# 0
            set nl 1
        elseif mem#==0xa
            set mem# 0
            set nl 1
        elseif nl==1
            addcall files_size files_set_value(entry,files_size)
            set entry mem
            set nl 0
        endelseif
        inc mem
        dec size
    endwhile
    if nl==1
        addcall files_size files_set_value(entry,files_size)
    endif
    if files_size==(files_size)
        call texter("size limit at last char at files error")
    endif
    ss files
    setcall files files_pointer()
    add files files_size
    set files# 0
endfunction
function files_set_value(ss new_data,sd pos)
    sd sizer
    setcall sizer strlen(new_data)
    while sizer!=0
        dec sizer
        if new_data#==0x9
            inc new_data
        elseif new_data#==0x20
            inc new_data
        else
            set sizer 0
        endelse
    endwhile
    sd new_len
    setcall new_len strlen(new_data)
    if new_len==0
        #just tabs/spaces on this row
        return 0
    endif
    inc new_len
    #
    chars comment="#"
    if new_data#==comment
        #a comment row
        return 0
    endif
    #
    sd files
    setcall files files_pointer()
    add files pos
    #
    add pos new_len
    if pos>(files_size)
        call texter("size limit at files error")
    endif
    #
    call cpymem(files,new_data,new_len)
    #
    return new_len
endfunction

#true if match or false
Function filepathdelims(ss str)
        Chars bslash="\\"
        Chars slash="/"
        If str#==bslash
                Return (TRUE)
        EndIf
        If str#==slash
                Return (TRUE)
        EndIf
        Return (FALSE)
EndFunction

function replacements(sd p_cursor,sd file_out)
    ss entry_mem
    sd entry_len
    ss file_srcpath
    setcall file_srcpath src_path(p_cursor#)
    setcall entry_mem file_get_content(file_srcpath,#entry_len)
    ss entry_start
    set entry_start entry_mem
    ss t_str
    setcall t_str template_string()
    sd pos
    sd bool=1
    while bool==1
        setcall bool str_in_mem_bool(t_str,entry_mem,entry_len,#pos)
        call file_write(file_out,entry_mem,pos)
        if bool==1
            addcall p_cursor# strlen(p_cursor#)
            inc p_cursor#
            #recursive call; the replacement can have it's own replacements
            call replacements(p_cursor,file_out)
            #advance to the next piece to write
            add entry_mem pos
            sub entry_len pos
            sd inter_sz
            setcall inter_sz strlen(t_str)
            add entry_mem inter_sz
            sub entry_len inter_sz
        endif
    endwhile
    call free(entry_start)
endfunction

#cursor
function get_src_dest(ss cursor,sd p_line)
    if cursor#==0
        call texter("src/dest files expected")
    endif
    set p_line# cursor
    #aicea deja s-a analizat si s-a marcat cu 0 la liniile noi
    while cursor#!=0
        inc cursor
    endwhile
    while cursor#==0
        inc cursor
    endwhile
    return cursor
endfunction

entry _main(data argc,data argv)

#go to script folder
import "GetModuleFileNameA" GetModuleFileName
chars full_path#MAX_PATH
sd size
setcall size GetModuleFileName(0,#full_path,(MAX_PATH))
if size==0
    call texter("GetModuleFileName Error.")
endif
ss pointer
set pointer #full_path
add pointer size
sd bool=FALSE
while bool==(FALSE)
    dec pointer
    setcall bool filepathdelims(pointer)
    if bool==(TRUE)
        set pointer# 0
    elseif pointer==#full_path
        set bool (TRUE)
    endelseif
endwhile
call dirch_nolog(#full_path)

call log_open()
#call file_get_content_forward("src.txt",dest_folder_set)
#call file_get_content_forward("dest.txt",src_folder_set)
if argc<2
    call texter("file argument expected")
endif
add argv (DWORD)
#"files.txt"
call file_get_content_forward(argv#,files_set)

ss cursor
setcall cursor files_pointer()

ss p_src;setcall p_src p_src_folder()
setcall cursor get_src_dest(cursor,p_src)
ss p_dest;setcall p_dest p_dest_folder()
setcall cursor get_src_dest(cursor,p_dest)

ss root
setcall root dest_folder()
call dirch(root)

sd templates_data
setcall templates_data templates()
sd is_template#1
set templates_data# 0
while cursor#!=0
    ss filename
    setcall filename loop(cursor,#is_template)
    if filename!=0
        if is_template==1
            call src_get_template(cursor,templates_data)
        else
            sd t_cursor
            ss mem
            sd sz
            call log_set("F ",filename)
            sd file
            setcall file file_open(filename,"wb")
            #
            set t_cursor templates_data
            sd t_start
            set t_start t_cursor
            while t_cursor#!=0
                set mem t_cursor#
                add t_cursor (DWORD)
                set sz t_cursor#
                add t_cursor (DWORD)
                add t_cursor (DWORD)
                call file_write(file,mem,sz)
            endwhile
            #write main
            #look for forward replacements
            call replacements(#cursor,file)
            #
            while t_cursor!=t_start
                sub t_cursor (DWORD)
                set sz t_cursor#
                sub t_cursor (DWORD)
                sd prev_sz
                set prev_sz t_cursor#
                sub t_cursor (DWORD)
                set mem t_cursor#
                add mem prev_sz
                addcall mem template_string_length()
                call file_write(file,mem,sz)
            endwhile
        endelse
    endif
    addcall cursor strlen(cursor)
    inc cursor
endwhile
call log_close()
return 1
